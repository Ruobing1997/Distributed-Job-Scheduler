// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: proto/tasks_grpc.proto

package task_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerServiceClient is the client API for TaskManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerServiceClient interface {
	TaskStream(ctx context.Context, opts ...grpc.CallOption) (TaskManagerService_TaskStreamClient, error)
}

type taskManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerServiceClient(cc grpc.ClientConnInterface) TaskManagerServiceClient {
	return &taskManagerServiceClient{cc}
}

func (c *taskManagerServiceClient) TaskStream(ctx context.Context, opts ...grpc.CallOption) (TaskManagerService_TaskStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TaskManagerService_ServiceDesc.Streams[0], "/TaskManagerService/TaskStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerServiceTaskStreamClient{stream}
	return x, nil
}

type TaskManagerService_TaskStreamClient interface {
	Send(*TaskStreamRequest) error
	Recv() (*TaskStreamResponse, error)
	grpc.ClientStream
}

type taskManagerServiceTaskStreamClient struct {
	grpc.ClientStream
}

func (x *taskManagerServiceTaskStreamClient) Send(m *TaskStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskManagerServiceTaskStreamClient) Recv() (*TaskStreamResponse, error) {
	m := new(TaskStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskManagerServiceServer is the server API for TaskManagerService service.
// All implementations must embed UnimplementedTaskManagerServiceServer
// for forward compatibility
type TaskManagerServiceServer interface {
	TaskStream(TaskManagerService_TaskStreamServer) error
	mustEmbedUnimplementedTaskManagerServiceServer()
}

// UnimplementedTaskManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServiceServer struct {
}

func (UnimplementedTaskManagerServiceServer) TaskStream(TaskManagerService_TaskStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskStream not implemented")
}
func (UnimplementedTaskManagerServiceServer) mustEmbedUnimplementedTaskManagerServiceServer() {}

// UnsafeTaskManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServiceServer will
// result in compilation errors.
type UnsafeTaskManagerServiceServer interface {
	mustEmbedUnimplementedTaskManagerServiceServer()
}

func RegisterTaskManagerServiceServer(s grpc.ServiceRegistrar, srv TaskManagerServiceServer) {
	s.RegisterService(&TaskManagerService_ServiceDesc, srv)
}

func _TaskManagerService_TaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskManagerServiceServer).TaskStream(&taskManagerServiceTaskStreamServer{stream})
}

type TaskManagerService_TaskStreamServer interface {
	Send(*TaskStreamResponse) error
	Recv() (*TaskStreamRequest, error)
	grpc.ServerStream
}

type taskManagerServiceTaskStreamServer struct {
	grpc.ServerStream
}

func (x *taskManagerServiceTaskStreamServer) Send(m *TaskStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskManagerServiceTaskStreamServer) Recv() (*TaskStreamRequest, error) {
	m := new(TaskStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TaskManagerService_ServiceDesc is the grpc.ServiceDesc for TaskManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskManagerService",
	HandlerType: (*TaskManagerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskStream",
			Handler:       _TaskManagerService_TaskStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/tasks_grpc.proto",
}
